/**
 * MoviesAPI - recruitment task
 * This is a simple API for recruitment purposes
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mateusz@russak.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comment from '../model/Comment';
import Movie from '../model/Movie';
import MovieQuery from '../model/MovieQuery';

/**
* Public service.
* @module api/PublicApi
* @version 1.0.0
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addComment operation.
     * @callback module:api/PublicApi~addCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * puts comment into database
     * By calling this operation you can search for movies in the system. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.movie pass an optional movie id to get comments only for specific movie
     * @param {module:api/PublicApi~addCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    addComment(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'Movie': opts['movie']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];

      return this.apiClient.callApi(
        '/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addMovie operation.
     * @callback module:api/PublicApi~addMovieCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds movies to database
     * Adds movies to database
     * @param {Object} opts Optional parameters
     * @param {module:model/MovieQuery} opts.title Movie title to add - more informations will be fetched from OMDB API.
     * @param {module:api/PublicApi~addMovieCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMovie(opts, callback) {
      opts = opts || {};
      let postBody = opts['title'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/movies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findComments operation.
     * @callback module:api/PublicApi~findCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns list of comments
     * By calling this operation you can search for movies in the system. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.movie pass an optional movie id to get comments only for specific movie
     * @param {module:api/PublicApi~findCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    findComments(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'Movie': opts['movie']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];

      return this.apiClient.callApi(
        '/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findMovies operation.
     * @callback module:api/PublicApi~findMoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Movie>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches for movies in database
     * By calling this operation you can search for movies in the system. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.title pass an optional movie title for looking up for specific movie
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/PublicApi~findMoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Movie>}
     */
    findMovies(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'Title': opts['title'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Movie];

      return this.apiClient.callApi(
        '/movies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
